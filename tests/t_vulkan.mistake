comment Create the Vulkan manager
variable $$$ is ğŸ”¥ğŸ”¥ end

comment Create a list for us to turn into a buffer
variable [0] is [!] unit end 
[<] [0] 1 1 end
[<] [0] 2 2 end
[<] [0] 3 3 end

comment Create the other list for us to turn into a buffer
variable [1] is [!] unit end
[<] [1] 1 9 end
[<] [1] 2 18 end
[<] [1] 3 27 end

comment Convert the data lists into compute buffers
variable <#[0] is ğŸ”¥[!] ğŸ”¥+32 [0] end
variable <#[1] is ğŸ”¥[!] ğŸ”¥+32 [1] end


comment Create the output list
variable >[!] is [!] unit end
[<] >[!] 1 0 end
[<] >[!] 2 0 end
[<] >[!] 3 0 end

comment Convert the output list into a compute buffer
variable >#[] is ğŸ”¥[!] ğŸ”¥+32 >[!] end

comment Define the compute shader function 
variable ğŸ”¥() is function _ returns open 

#version 460    
layout(local_size_x = 1) in;

layout(set = 0, binding = 0) buffer buf_in_a { uint in_a[]; };
layout(set = 0, binding = 1) buffer buf_in_b { uint in_b[]; };
layout(set = 0, binding = 2) buffer buf_out_a { uint out_a[]; };

void main() {
    uint idx = gl_GlobalInvocationID.x;
    out_a[idx] = in_a[idx] * in_b[idx];
}

close close end

comment Create the list of input buffers
variable *** is [!] unit end
[<] *** 1 <#[0] end
[<] *** 2 <#[1] end

comment Create the list of output buffers
variable %%% is [!] unit end
[<] %%% 1 >#[] end

comment Run the vulkan program with the buffers
ğŸ”¥ğŸ”¥() ğŸ”¥() $$$ 3 0 *** %%% end

comment Print the result
function _ returns open 
?! open ğŸ”¥[<] <#[0] close end
?! open ğŸ”¥[<] <#[1] close end
?! open ğŸ”¥[<] >#[] close  
close close unit end